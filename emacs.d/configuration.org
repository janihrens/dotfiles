#+TITLE: Emacs configuration

* Startup File
;; This enables saving the current desktop on shutdown.
(desktop-save-mode 1)

* my Settings

* Use sensible-defaults.el

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
#+END_SRC

* Set personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Jan Ihrens"
        user-mail-address "janihrens@gmail.com"
        calendar-latitude 49.0
        calendar-longitude 8.4
        calendar-location-name "Karlsruhe, DE")
#+END_SRC
* Add =resources= to =load-path=

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/resources/")
  (add-to-list 'custom-theme-load-path' "~/.emacs.d/themes/emacs-color-theme-solarized/")
#+END_SRC

* Package management

I use =cask= and =pallet= for managing packages.

#+BEGIN_SRC emacs-lisp
  (require 'cask "~/.cask/cask.el")
  (cask-initialize)
  (require 'pallet)
  (pallet-mode t)
#+END_SRC

* =evil-mode=

# Use =evil=.

# #+BEGIN_SRC emacs-lisp
#   (evil-mode 1)
# #+END_SRC

# Enable =surround= everywhere.

# #+BEGIN_SRC emacs-lisp
#   (global-evil-surround-mode 1)
# #+END_SRC

# Bind =C-p= to fuzzy-finding files in the current project.

# #+BEGIN_SRC emacs-lisp
#   (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
# #+END_SRC

* Helm mode
 #+BEGIN_SRC emacs-lisp
  (helm-mode 1)
  (global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC

* Utility functions

Define a big ol' bunch of handy utility functions.

#+BEGIN_SRC emacs-lisp
  (defun hrs/view-buffer-name ()
    "Display the filename of the current buffer."
    (interactive)
    (message (buffer-file-name)))

  (defun hrs/generate-scratch-buffer ()
    "Create and switch to a temporary scratch buffer with a random
       name."
    (interactive)
    (switch-to-buffer (make-temp-name "scratch-")))

  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (other-window 1))

  (defun hrs/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))
#+END_SRC

#+RESULTS:
: hrs/kill-current-buffer

* UI preferences
** Set default font and configure font resizing

I'm partial to Inconsolata. I think a bigger size looks better on a Mac
(especially since I'm usually using a large display when I'm on a Mac).

The standard =text-scale-= functions just resize the text in the current buffer;
I'd generally like to resize the text in /every/ buffer, and I usually want to
change the size of the modeline, too (this is especially helpful when
presenting). These functions and bindings let me resize everything all together!

Note that this overrides the default font-related keybindings from
=sensible-defaults=.

#+BEGIN_SRC emacs-lisp** Set default font and configure font resizing

I'm partial to Inconsolata. I think a bigger size looks better on a Mac
(especially since I'm usually using a large display when I'm on a Mac).

The standard =text-scale-= functions just resize the text in the current buffer;
I'd generally like to resize the text in /every/ buffer, and I usually want to
change the size of the modeline, too (this is especially helpful when
presenting). These functions and bindings let me resize everything all together!

Note that this overrides the default font-related keybindings from
=sensible-defaults=.

#+BEGIN_SRC emacs-lisp
  (setq hrs/default-font "Inconsolata")
  (setq hrs/default-font-size 18)
  (setq hrs/current-font-size hrs/default-font-size)
  (setq hrs/font-change-increment 1.1)

  (defun hrs/set-font-size ()
    "Set the font to `hrs/default-font' at `hrs/current-font-size'."
    (set-frame-font
     (concat hrs/default-font "-" (number-to-string hrs/current-font-size))))

  (defun hrs/reset-font-size ()
    "Change font size back to `hrs/default-font-size'."
    (interactive)
    (setq hrs/current-font-size hrs/default-font-size)
    (hrs/set-font-size))

  (defun hrs/increase-font-size ()
    "Increase current font size by a factor of `hrs/font-change-increment'."
    (interactive)
    (setq hrs/current-font-size
          (ceiling (* hrs/current-font-size hrs/font-change-increment)))
    (hrs/set-font-size))

  (defun hrs/decrease-font-size ()
    "Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq hrs/current-font-size
          (max 1
               (floor (/ hrs/current-font-size hrs/font-change-increment))))
    (hrs/set-font-size))

  (define-key global-map (kbd "C-)") 'hrs/reset-font-size)
  (define-key global-map (kbd "C-+") 'hrs/increase-font-size)
  (define-key global-map (kbd "C-=") 'hrs/increase-font-size)
  (define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
  (define-key global-map (kbd "C--") 'hrs/decrease-font-size)
#+END_SRC

#+RESULTS:
: hrs/decrease-font-size

** Disable window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode t)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

#+RESULTS:

** Custom solarized-dark themeCustom solarized-dark themeCustom solarized-dark theme
# #+BEGIN_SRC emacs-lisp
# (when window-system
#   (setq solarized-use-variable-pitch nil)
#   (setq solarized-height-plus-1 1.0)
#   (setq solarized-height-plus-2 1.0)
#   (setq solarized-height-plus-3 1.0)
#   (setq solarized-height-plus-4 1.0)
#   (setq solarized-high-contrast-mode-line t)
#   (load-theme 'solarized-dark t))
# #+END_SRC

#+BEGIN_SRC emacs-lisp
  (load-theme 'wombat t)
#+END_SRC

#+RESULTS:
: t


** use powerline
   #+BEGIN_SRC emacs-lisp
     (powerline-default-theme)
   #+END_SRC


** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (when window-system
     (global-hl-line-mode 1)
(set-face-background 'hl-line "#330")
(set-face-underline-p 'hl-line nil))
#+END_SRC

#+RESULTS:

** Hide certain modes from the modeline

I'd rather have only a few necessary mode identifiers on my modeline. This
either hides or "renames" a variety of major or minor modes using the =diminish=
package.

#+BEGIN_SRC emacs-lisp
  (defmacro diminish-minor-mode (filename mode &optional abbrev)
    `(eval-after-load (symbol-name ,filename)
       '(diminish ,mode ,abbrev)))

  (defmacro diminish-major-mode (mode-hook abbrev)
    `(add-hook ,mode-hook
               (lambda () (setq mode-name ,abbrev))))

  (diminish-minor-mode 'abbrev 'abbrev-mode)
  (diminish-minor-mode 'company 'company-mode)
  (diminish-minor-mode 'eldoc 'eldoc-mode)
  (diminish-minor-mode 'flycheck 'flycheck-mode)
  (diminish-minor-mode 'flyspell 'flyspell-mode)
  (diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
  (diminish-minor-mode 'projectile 'projectile-mode)
  (diminish-minor-mode 'ruby-end 'ruby-end-mode)
  (diminish-minor-mode 'subword 'subword-mode)
  (diminish-minor-mode 'undo-tree 'undo-tree-mode)
  (diminish-minor-mode 'yard-mode 'yard-mode)
  (diminish-minor-mode 'yasnippet 'yas-minor-mode)
  (diminish-minor-mode 'wrap-region 'wrap-region-mode)

  (diminish-minor-mode 'paredit 'paredit-mode " π")

  (diminish-major-mode 'emacs-lisp-mode-hook "el")
  (diminish-major-mode 'haskell-mode-hook "λ=")
  (diminish-major-mode 'lisp-interaction-mode-hook "λ")
  (diminish-major-mode 'python-mode-hook "Py")
#+END_SRC
* Publishing and task management with Org-mode
** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t)))

  (setq org-hide-leading-stars t)
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

** Task management

Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
place in the archive.

#+BEGIN_SRC emacs-lisp
  (defun mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key global-map "\C-c\C-x\C-s" 'mark-done-and-archive)
#+END_SRC

Record the time that a todo was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

Follow links via Return

#+BEGIN_SRC emacs-lisp
  (setq org-return-follows-link t)
#+END_SRC


**** Keybindings

Bind a few handy keys.

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC


Hit =M-n= to quickly open up a capture template for a new todo.

#+BEGIN_SRC emacs-lisp
  (defun org-capture-todo ()
    (interactive)
    (org-capture :keys "t"))

  (global-set-key (kbd "M-n") 'org-capture-todo)
#+END_SRC

** Exporting

**** Exporting to PDF

I want to produce PDFs with syntax highlighting in the code. The best way to do
that seems to be with the =minted= package, but that package shells out to
=pygments= to do the actual work. =pdflatex= usually disallows shell commands;
this enables that.

#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

** TeX configuration

I rarely write LaTeX directly any more, but I often export through it with
org-mode, so I'm keeping them together.

Automatically parse the file after loading it.

#+BEGIN_SRC emacs-lisp
  (setq TeX-parse-self t)
#+END_SRC

Always use =pdflatex= when compiling LaTeX documents. I don't really have any
use for DVIs.

#+BEGIN_SRC emacs-lisp
  (setq TeX-PDF-mode t)
#+END_SRC

Enable a minor mode for dealing with math (it adds a few useful keybindings),
and always treat the current file as the "main" file. That's intentional, since
I'm usually actually in an org document.

#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (LaTeX-math-mode)
              (setq TeX-master t)))
#+END_SRC

* Editing settings
** Always kill current buffer

Assume that I always want to kill the current buffer when hitting =C-x k=.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'hrs/kill-current-buffer)
#+END_SRC

#+RESULTS:
: hrs/kill-current-buffer

** Switch windows when splitting

When splitting a window, I invariably want to switch to the new window. This
makes that automatic.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
#+END_SRC

#+RESULTS:
: hrs/split-window-right-and-switch

* Set custom keybindings

Just a few handy functions.

#+BEGIN_SRC emacs-lisp
  (setq org-special-ctrl-a/e t)
  (global-set-key (kbd "C-w") 'backward-kill-word)
  (global-set-key (kbd "C-x C-k") 'kill-region)
  (global-set-key (kbd "C-M-,") 'hippie-expand)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-p") 'other-frame)
  (global-set-key (kbd "M-#") 'sort-lines)
  (global-set-key (kbd "C-c s") 'multi-term)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C-:") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-;") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-S-c C-<") 'mc/mark-all-like-this)
  (global-set-key (kbd "C-.") 'er/expand-region)
  (global-set-key (kbd "<f5>") 'occur)
  (global-set-key (kbd "<f6>") 'flyspell-mode)
  (global-set-key (kbd "<f8>") 'helm-imenu-anywhere)
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  (global-set-key (kbd "C-b") 'helm-buffers-list)

(global-set-key [(f9)] 'buffer-stack-bury)
(global-set-key [(control f9)] 'buffer-stack-bury-and-kill)
(global-set-key [(f10)] 'buffer-stack-up)
(global-set-key [(f11)] 'buffer-stack-down)
(global-set-key [(f12)] 'buffer-stack-track)
(global-set-key [(control f12)] 'buffer-stack-untrack)

  (setq py-python-command "python3")
#+END_SRC

#+RESULTS:
=python3
==python3
==python3
==python3
==python3
==python3
==python3
==python3
=* additions

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

#+RESULTS:
* C++ things
  stuff from [[https://github.com/byuksel][byuksel]]s emacs as a C/C++ Tutorial
  #+BEGIN_SRC emacs-lisp
    ; start package.el with emacs
    (require 'package)
    ; add MELPA to repository list
    (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
    ; initialize package.el
    (package-initialize)
    ; start auto-complete with emacs
    (require 'auto-complete)
    ; do default config for auto-complete
    (require 'auto-complete-config)
    (ac-config-default)
    ; start yasnippet with emacs
    (require 'yasnippet)
    (yas-global-mode 1)
    ; let's define a function which initializes auto-complete-c-headers and gets called for c/c++ hooks
    (defun my:ac-c-header-init ()
      (require 'auto-complete-c-headers)
      (add-to-list 'ac-sources 'ac-source-c-headers)
    )
    ; now let's call this function from c/c++ hooks
    (add-hook 'c++-mode-hook 'my:ac-c-header-init)
    (add-hook 'c-mode-hook 'my:ac-c-header-init)

    ; Fix iedit bug in Mac
    (define-key global-map (kbd "C-c ;") 'iedit-mode)

    ; start flymake-google-cpplint-load
    ; let's define a function for flymake initialization
    (defun my:flymake-google-init ()
      (require 'flymake-google-cpplint)
      (custom-set-variables
       '(flymake-google-cpplint-command "/usr/local/bin/cpplint")
      )
      (flymake-google-cpplint-load)
    )
    (add-hook 'c-mode-hook 'my:flymake-google-init)
    (add-hook 'c++-mode-hook 'my:flymake-google-init)

    ; start google-c-style with emacs
    (require 'google-c-style)
    (add-hook 'c-mode-common-hook 'google-set-c-style)
    (add-hook 'c-mode-common-hook 'google-make-newline-indent)

    ; turn on Semantic
    (semantic-mode 1)
    ; let's define a function which adds semantic as a suggestion backend to auto complete
    ; and hook this function to c-mode-common-hook
    (defun my:add-semantic-to-autocomplete()
      (add-to-list 'ac-sources 'ac-source-semantic)
    )
    (add-hook 'c-mode-common-hook 'my:add-semantic-to-autocomplete)
    ; turn on ede mode
    (global-ede-mode 1)
    ; create a project for our program.
    ; (ede-cpp-root-project "my project" :file "~/olb-1.0r0/examples/cylinder2d/cylinder2d.cpp"
    ;                       :include-path '("/../../src"))
    ; you can use system-include-path for setting up the system header file locations.
    ; turn on automatic reparsing of open buffers in semantic
    (global-semantic-idle-scheduler-mode 1)
  #+END_SRC

  #+RESULTS:
  : t
* unfill paragraph
 #+BEGIN_SRC emacs-lisp
 (defun unfill-paragraph (&optional region)
      "Takes a multi-line paragraph and makes it into a single line of text."
      (interactive (progn (barf-if-buffer-read-only) '(t)))
      (let ((fill-column (point-max))
            ;; This would override `fill-column' if it's an integer.
            (emacs-lisp-docstring-fill-column t))
        (fill-paragraph nil region)))
 #+END_SRC

 #+BEGIN_SRC emacs-lisp
(define-key global-map "\M-Q" 'unfill-paragraph)
 #+END_SRC
